#include <behaviors.dtsi>
#include <dt-bindings/zmk/mouse.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

/*                              36 key matrix / layout mapping

  ╭────────────────────┬────────────────────╮ ╭─────────────────────┬─────────────────────╮
  │  0   1   2   3   4 │  5   6   7   8   9 │ │ lt4 lt3 lt2 lt1 lt0 │ rt0 rt1 rt2 rt3 rt4 │
  │ 10  11  12  13  14 │ 15  16  17  18  19 │ │ lm4 lm3 lm2 lm1 lm0 │ rm0 rm1 rm2 rm3 rm4 │
  │ 20  21  22  23  24 │ 25  26  27  28  29 │ │ lb4 lb3 lb2 lb1 lb0 │ rb0 rb1 rb2 rb3 rb4 │
  ╰───────╮ 30  31  32 │ 33  34  35 ╭───────╯ ╰───────╮ lh2 lh1 lh0 │ rh0 rh1 rh2 ╭───────╯
          ╰────────────┴────────────╯                 ╰─────────────┴─────────────╯             */
// dt-formatter: indent = "  "
// dt-formatter: multilineIntegerCellsIndent = "reindent"
// dt-formatter: multilineListCommaStyle = "leading"

&lt {
  flavor = "balanced";
  quick-tap-ms = <175>;
  tapping-term-ms = <200>;
};

/ {
  combos {
    compatible = "zmk,combos";

    combo_esc {
      bindings = <&kp ESC>;
      key-positions = <0 1>;
    };
  };

  macros {
  };

  behaviors {
    hml: homewrow_mods_left {
      compatible = "zmk,behavior-hold-tap";
      #binding-cells = <2>;
      label = "HOMEROW_MODS_LEFT_HAND";
      bindings = <&kp>, <&kp>;

      tapping-term-ms = <250>;
      flavor = "balanced";
      quick-tap-ms = <175>;
      hold-trigger-on-release;
      hold-trigger-key-positions = <32 31 30 33 34 35 25 15 5 6 7 8 9 19 18 17 16 26 27 28 29>;
    };

    hmr: homewrow_mods_right {
      compatible = "zmk,behavior-hold-tap";
      #binding-cells = <2>;
      label = "HOMEROW_MODS_RIGHT_HAND";
      bindings = <&kp>, <&kp>;

      tapping-term-ms = <250>;
      quick-tap-ms = <175>;
      flavor = "balanced";
      hold-trigger-on-release;
      hold-trigger-key-positions = <0 1 2 3 4 10 11 12 13 14 20 21 22 23 24 30 31 32 33 34 35>;
    };

    swap: swapper {
      compatible = "zmk,behavior-tri-state";
      label = "SWAPPER";
      #binding-cells = <0>;
      bindings = <&kt LGUI>, <&kp TAB>, <&kt LGUI>;

      ignored-key-positions = <1>;
    };
  };

  keymap {
    compatible = "zmk,keymap";

    qwerty {
      bindings = <
        &kp Q        &kp W         &kp E        &kp R            &kp T        &kp Y    &kp U         &kp I        &kp O         &kp P
        &hml LALT A  &hml LCTRL S  &hml LGUI D  &hml LSHFT F     &kp G        &kp H    &hmr RSHFT J  &hmr RGUI K  &hmr RCTRL L  &hmr RALT SEMI
        &kp Z        &kp X         &kp C        &kp V            &kp B        &kp N    &kp M         &kp COMMA    &kp DOT       &kp FSLH
                                   &none        &lt 4 BACKSPACE  &kp LSHFT    &kp RET  &lt 5 SPACE   &none
      >;

      label = "QWERTY";
    };

    Canaria {
      bindings = <
        &kp W        &kp L         &kp Y        &kp P            &kp B        &kp F    &kp J         &kp O        &kp U         &kp SEMI
        &hml LALT C  &hml LCTRL R  &hml LGUI S  &hml LSHFT T     &kp G        &kp M    &hmr RSHFT N  &hmr RGUI E  &hmr RCTRL I  &hmr RALT A
        &kp Q        &kp Z         &kp V        &kp D            &kp K        &kp X    &kp H         &kp COMMA    &kp DOT       &kp FSLH
                                   &none        &lt 4 BACKSPACE  &kp LSHFT    &kp RET  &lt 5 SPACE   &none
      >;
    };

    Nerps {
      bindings = <
        &kp X  &kp L  &kp D   &kp P   &kp G     &kp Z   &kp K   &kp O     &kp U      &kp SEMI
        &kp N  &kp R  &kp T   &kp S   &kp W     &kp Y   &kp H   &kp E     &kp I      &kp A
        &kp Q  &kp J  &kp M   &kp C   &kp V     &kp B   &kp F   &kp APOS  &kp COMMA  &kp DOT
                      &trans  &trans  &trans    &trans  &trans  &trans
      >;
    };

    Matmak {
      bindings = <
        &kp B  &kp L  &kp D   &kp C   &kp Q     &kp K   &kp P   &kp A     &kp J      &kp SEMI
        &kp N  &kp R  &kp T   &kp S   &kp G     &kp H   &kp U   &kp O     &kp E      &kp I
        &kp Z  &kp X  &kp M   &kp W   &kp Y     &kp V   &kp F   &kp APOS  &kp COMMA  &kp DOT
                      &trans  &trans  &trans    &trans  &trans  &trans
      >;
    };

    extend {
      bindings = <
        &kp ESCAPE  &kp LS(TAB)  &kp TAB    &swap      &kp LG(GRAVE)                &kp TAB   &kp GRAVE      &none        &none      &none
        &kp LALT    &kp LCTRL    &kp LGUI   &kp LSHFT  &kp LS(LG(RIGHT_BRACKET))    &kp LEFT  &kp DOWN       &kp UP       &kp RIGHT  &none
        &kp LG(Z)   &kp LG(X)    &kp LG(C)  &kp LG(V)  &kp LS(LG(LEFT_BRACKET))     &kp HOME  &kp PAGE_DOWN  &kp PAGE_UP  &kp END    &none
                                 &none      &trans     &trans                       &kp RET   &lt 6 SPACE    &none
      >;
    };

    numbers {
      bindings = <
        &kp ESC       &kp TILDE      &kp LEFT_BRACKET  &kp LPAR         &kp LEFT_BRACE    &kp RIGHT_BRACE  &kp RPAR       &kp RIGHT_BRACKET  &kp GRAVE      &trans
        &hml LALT N1  &hml LCTRL N2  &hml LGUI N3      &hml LSHFT N4    &kp N5            &kp N6           &hmr RSHFT N7  &hmr RGUI N8       &hmr RCTRL N9  &hmr RALT N0
        &kp PIPE      &kp PLUS       &kp UNDERSCORE    &kp DQT          &trans            &trans           &kp SQT        &kp MINUS          &kp EQUAL      &kp BACKSLASH
                                     &none             &lt 6 BACKSPACE  &trans            &trans           &trans         &none
      >;

      label = "Num/Sym";
    };

    system {
      bindings = <
        &none         &none         &none         &none         &none           &none           &none              &none            &none       &none
        &tog 0        &tog 1        &none         &none         &bt BT_CLR      &kp C_PREVIOUS  &kp C_VOLUME_DOWN  &kp C_VOLUME_UP  &kp C_NEXT  &none
        &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4    &none           &kp C_PLAY_PAUSE   &kp K_MUTE       &none       &none
                                    &none         &trans        &none           &none           &trans             &none
      >;

      label = "System";
    };

    layer_6 {
      bindings = <
        &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans
        &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans
        &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans
                        &trans  &trans  &trans    &trans  &trans  &trans
      >;
    };
  };
};
